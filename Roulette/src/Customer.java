public class Customer 
{
	private Account acc;
	public Customer(double balance)
	{
		acc = new Account(balance);
	}
	public Account account()
	{
		return acc;
	}
	
	//all betting options
	public void bet(Wheel wheel, double bet, int key) throws NegativeBalanceException//bets on a single square
	{
		acc.withdraw(bet);
		if(key == wheel.getResult())
		{
			acc.deposit(35*bet); //35x1 payout
		}
	}
	public void bet(Wheel wheel, double bet, int[] set) throws NegativeBalanceException//bets on a specific set generated by the user
	{
		acc.withdraw(bet*set.length);
		for (int i=0; i<set.length; i++)
		{
			if (set[i]==wheel.getResult())
			{
				acc.deposit(35*bet); //35x1 payout
			}
		}
	}
	
	public void betOdd(Wheel wheel, double bet) throws NegativeBalanceException//bets on the odd numbers
	{
		acc.withdraw(bet);
		if (wheel.getResult()%2!=0)
		{
			acc.deposit(2*bet); //1x1 payout
		}
	}
	public void betEven(Wheel wheel, double bet) throws NegativeBalanceException//bets on the even number
	{
		acc.withdraw(bet);
		if (wheel.getResult()%2==0)
		{
			acc.deposit(2*bet); //1x1 payout
		}
	}
	
	public void betLow(Wheel wheel, double bet) throws NegativeBalanceException//for cases 1-18
	{
		acc.withdraw(bet);
		if(wheel.getResult()>=1 && wheel.getResult()<=18)
		{
			acc.deposit(2*bet);// 2x1 payout
		}
	}
	public void betHigh(Wheel wheel, double bet) throws NegativeBalanceException//for cases 19-36
	{
		acc.withdraw(bet);
		if(wheel.getResult()>=19 && wheel.getResult()<=36)
		{
			acc.deposit(2*bet);// 2x1 payout
		}
	}
	
	public void betRed(Wheel wheel, double bet) throws NegativeBalanceException//red numbers
	{
		acc.withdraw(bet);
		int [] rNum={1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36};
		for (int i=0; i<rNum.length; i++)
		{
			if(wheel.getResult()==rNum[i])
			{
				acc.deposit(2*bet); //1x1 payout
			}
		}
		
	}
	public void betBlack(Wheel wheel, double bet) throws NegativeBalanceException//black numbers
	{
		acc.withdraw(bet);
		int [] bNum={2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35};
		for (int i=0; i<bNum.length; i++)
		{
			if(wheel.getResult()==bNum[i])
			{
				acc.deposit(2*bet); //1x1 payout
			}
		}
	}
	
	public void betThirdTwelve(Wheel wheel, double bet)throws NegativeBalanceException //bets on 25-36 
	{
		acc.withdraw(bet);
		if(wheel.getResult()>=25 && wheel.getResult()<=36)
		{
			acc.deposit(4*bet);// 2x1 payout
		}
	}
	public void betSecondTwelve(Wheel wheel, double bet)throws NegativeBalanceException //bets on 13-24 
	{
		acc.withdraw(bet);
		if(wheel.getResult()>=13 && wheel.getResult()<=24)
		{
			acc.deposit(4*bet);// 2x1 payout
		}
	}
	public void betFirstTwelve(Wheel wheel, double bet)throws NegativeBalanceException //bets on 1-12 
	{
		acc.withdraw(bet);
		if(wheel.getResult()>=1 && wheel.getResult()<=12)
		{
			acc.deposit(4*bet);// 2x1 payout
		}
	}

	public void betThirdRow(Wheel wheel, double bet) throws NegativeBalanceException//bets on 3, 6, 9....36
	{
		acc.withdraw(bet);
		if (wheel.getResult()%3==0)
		{
			acc.deposit(4*bet);// 2x1 payout
		}
	}
	public void betSecondRow(Wheel wheel, double bet) throws NegativeBalanceException//bets on 2, 5, 8....35
	{
		acc.withdraw(bet);
		if ((wheel.getResult()+1)%3==0)
		{
			acc.deposit(4*bet);// 2x1 payout
		}
	}
	public void betFirstRow(Wheel wheel, double bet) throws NegativeBalanceException//bets on 1, 4, 7....34
	{
		acc.withdraw(bet);
		if ((wheel.getResult()+2)%3==0)
		{
			acc.deposit(4*bet);// 2x1 payout
		}
	}
	

	public String toString()
	{
		return "Customer";
	}
}
